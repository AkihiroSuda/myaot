#define _GNU_SOURCE
#include <errno.h>
#include <signal.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/uio.h>
#if defined(__linux__)
#include <sys/syscall.h>
#endif /* __linux__ */
#if defined(__APPLE__)
#include <sys/random.h>
#endif /* __APPLE__ */
#include <time.h>

#if defined(_MA_DEBUG)
static bool _ma_debug = true;
#define _MA_DEBUGF(fmt, ...) \
  do { \
    if (_ma_debug) { \
      fprintf(stderr, "MyAOT| " fmt "\n", __VA_ARGS__); \
    } \
  } while (0)
#else /* _MA_DEBUG */
#define _MA_DEBUGF(fmt, ...)
#endif /* _MA_DEBUG */

#define _MA_FATALF(fmt, ...) \
  do { \
    fprintf(stderr, "MyAOT| " fmt "\n", __VA_ARGS__); \
    abort(); \
  } while (0)

#if !defined(MAX)
#define MAX(a,b) ((a) > (b) ? a : b)
#endif /* MAX */

#if !defined(MIN)
#define MIN(a,b) ((a) < (b) ? a : b)
#endif /* MIN */

/* _MA_SIGN_BIT(4) =  0b0000'1000 */
#define _MA_SIGN_BIT(pos) (1LL << ((pos)-1))
/* _MA_SIGN_MASK(4) = 0b1111'1000 */
#define _MA_SIGN_MASK(pos) (~(_MA_SIGN_BIT((pos))-1))
#define _MA_SIGN_EXT(val, pos) ((val) & _MA_SIGN_BIT((pos)) ? ((val) | _MA_SIGN_MASK((pos))) : (val))

#define __MA_JUMP_NEAR(addr, seg_head, addr_labels) goto *(addr_labels)[((addr) - (seg_head))/4]
#define __MA_JUMP_FAR(addr) return (addr)
#define __MA_JUMP(addr, seg_head, seg_size, addr_labels) \
  if ((unsigned)((addr) - (seg_head)) < (seg_size)) { __MA_JUMP_NEAR((addr), (seg_head), (addr_labels)); } else { __MA_JUMP_FAR((addr)); }

#if !defined(_MA_REG_TYPE)
#define _MA_REG_TYPE uint32_t
#endif /* _MA_REG_TYPE */
typedef _MA_REG_TYPE _ma_reg_t;

#define _MA_REG_ZERO 0 /* Hard-wired zero */
#define _MA_REG_RA 1 /* Return address */
#define _MA_REG_SP 2 /* Stack pointer */
#define _MA_REG_GP 3 /* Global pointer */
#define _MA_REG_TP 4 /* Thread pointer */
#define _MA_REG_T0 5 /* Temporary / alternate link register */
#define _MA_REG_T1 6
#define _MA_REG_T2 7
#define _MA_REG_S0 8 /* Save register / frame pointer */
#define _MA_REG_FP 8 /* Save register / frame pointer */
#define _MA_REG_S1 9
#define _MA_REG_A0 10
#define _MA_REG_A1 11
#define _MA_REG_A2 12
#define _MA_REG_A3 13
#define _MA_REG_A4 14
#define _MA_REG_A5 15
#define _MA_REG_A6 16
#define _MA_REG_A7 17
#define _MA_REG_S2 18
#define _MA_REG_S3 19
#define _MA_REG_S4 20
#define _MA_REG_S5 21
#define _MA_REG_S6 22
#define _MA_REG_S7 23
#define _MA_REG_S8 24
#define _MA_REG_S9 25
#define _MA_REG_S10 26
#define _MA_REG_S11 27
#define _MA_REG_T3 28
#define _MA_REG_T4 29
#define _MA_REG_T5 30
#define _MA_REG_T6 31

struct _ma_regs {
  _ma_reg_t x[32];
} _ma_regs;

struct _ma_regs _ma_regs;


void _ma_regs_dump(_ma_reg_t pc) {
  _MA_DEBUGF("=== PC=%08X ===", pc);
  _MA_DEBUGF("X0=%08X X1(RA)=%08X X2(SP)=%08X X3(GP)=%08X X4(TP)=%08X X5(T0)=%08X X6=%08X X7=%08X",
      _ma_regs.x[0], _ma_regs.x[1], _ma_regs.x[2], _ma_regs.x[3], _ma_regs.x[4], _ma_regs.x[5], _ma_regs.x[6], _ma_regs.x[7]);
  _MA_DEBUGF("X8(S0/FP)=%08X X9(S1)=%08X X10(A0)=%08X X11=%08X X12=%08X, X13=%08X, X14=%08X, X15=%08X",
      _ma_regs.x[8], _ma_regs.x[9], _ma_regs.x[10], _ma_regs.x[11], _ma_regs.x[12], _ma_regs.x[13], _ma_regs.x[14], _ma_regs.x[15]);
  _MA_DEBUGF("X16=%08X X17=%08X X18(S2)=%08X X19=%08X X20=%08X X21=%08X X22=%08X X23=%08X",
      _ma_regs.x[16], _ma_regs.x[17], _ma_regs.x[18], _ma_regs.x[19], _ma_regs.x[20], _ma_regs.x[21], _ma_regs.x[22], _ma_regs.x[23]);
  _MA_DEBUGF("X24=%08X X25=%08X X26=%08X X27=%08X X28(T3)=%08X X29=%08X X30=%08X X31=%08X",
      _ma_regs.x[24], _ma_regs.x[25], _ma_regs.x[26], _ma_regs.x[27], _ma_regs.x[28], _ma_regs.x[29], _ma_regs.x[30], _ma_regs.x[31]);
}

struct _ma_vma_entry {
  _ma_reg_t addr;
  _ma_reg_t len;
  void *bytes; /* Optional */
} _ma_vma_entry;

struct _ma_vma_entry *_ma_vma_entries[];
struct _ma_vma_entry *_ma_vma_heap_entry;
struct _ma_vma_entry *_ma_vma_stack_entry;
_ma_reg_t _ma_vma_heap_cur;

uint8_t _ma_at_ph[];
_ma_reg_t _ma_at_phent, _ma_at_phnum, _ma_at_entry;

void _ma_vma_heap_entry_init(void) {
  _ma_vma_heap_entry->addr = 0x40000000; /* 1GiB */ /* FIXME */
  _ma_vma_heap_cur = _ma_vma_heap_entry->addr;
  _ma_vma_heap_entry->len = 1 * 1024 * 1024 * 1024; /* 1 GiB */ /* FIXME */
  _MA_DEBUGF("Heap begin=0x%X len=0x%x", _ma_vma_heap_entry->addr, _ma_vma_heap_entry->len);
  _ma_vma_heap_entry->bytes = malloc(_ma_vma_heap_entry->len);
}

void _ma_vma_stack_entry_init(int argc, char *argv[]) {
  _ma_reg_t argc_dummy = 1; /* FIXME: proper argc */
  _ma_reg_t sp;
  _ma_vma_stack_entry->addr = 0xc0000000; /* 3 GiB */ /* FIXME */
  _ma_vma_stack_entry->len = 4 * 1024 * 1024; /* 4 MiB */ /* FIXME */
  _MA_DEBUGF("Stack begin=0x%X len=0x%x", _ma_vma_stack_entry->addr, _ma_vma_stack_entry->len);
  _ma_vma_stack_entry->bytes = malloc(_ma_vma_stack_entry->len);
  memset(_ma_vma_stack_entry->bytes, 0, _ma_vma_stack_entry->len);
  /* Initialize the stack */
  sp = _ma_vma_stack_entry->addr + _ma_vma_stack_entry->len;
	_ma_regs.x[_MA_REG_FP]= sp;

  /* Initialize AT_RANDOM */
  /* FIXME: this shouldn't be on the stack? */
  sp -= 16;
  getentropy(_ma_vma_stack_entry->bytes + sp - _ma_vma_stack_entry->addr, 16);
  _ma_reg_t randomp = sp;

  /* Initialize AT_PHDR */
  /* FIXME: this shouldn't be on the stack? */
  sp -= _ma_at_phent * _ma_at_phnum;
  memcpy(_ma_vma_stack_entry->bytes + sp - _ma_vma_stack_entry->addr, _ma_at_ph, _ma_at_phent * _ma_at_phnum);
  _ma_reg_t phdr = sp;

  /* Initialize auxv */
  struct {
    _ma_reg_t k;
    _ma_reg_t v;
  } auxv[] = {
    {3 /* AT_PHDR */, phdr},
    {4 /* AT_PHENT */, _ma_at_phent},
    {5 /* AT_PHNUM */, _ma_at_phnum},
    {6 /* AT_PAGESZ */, 4096},
    {9 /* AT_ENTRY */, _ma_at_entry},
    {11 /* AT_UID */, getuid()},
    {12 /* AT_EUID */, geteuid()},
    {13 /* AT_GID */, getgid()},
    {14 /* AT_EGID */, getegid()},
    {23 /* AT_SECURE */, 0},
    {25 /* AT_RANDOM */, randomp},
    {0 /* AT_NULL */, 0},
  };
  sp -= sizeof(auxv);
  memcpy(_ma_vma_stack_entry->bytes + sp - _ma_vma_stack_entry->addr, auxv, sizeof(auxv));

  /* TODO: envp */
  sp -= sizeof(_ma_reg_t);

  /* TODO: argv */
  sp -= sizeof(_ma_reg_t) * (argc_dummy + 1);

  /* TODO: argc */
  sp -= sizeof(_ma_reg_t);
  memcpy(_ma_vma_stack_entry->bytes + sp - _ma_vma_stack_entry->addr, &argc_dummy, sizeof(_ma_reg_t));

  _ma_regs.x[_MA_REG_SP]= sp;
}

void* _ma_translate_ptr(_ma_reg_t r) {
  void *ret = (void*)(long)r;
  int i = 0;
  for (;;) {
    struct _ma_vma_entry *ent = _ma_vma_entries[i];
    if (ent == NULL) break;
    if (ent->addr <= r && r <= ent->addr + ent->len -1) {
      if (ent->bytes == NULL) {
        _MA_DEBUGF("Mapping VMA address 0x%08X", r);
        ent->bytes = malloc(ent->len);
        memset(ent->bytes, 0, ent->len);
      }
      ret = ent->bytes + r - ent->addr;
      break;
    }
    i++;
  }
  _MA_DEBUGF("_ma_translate_ptr(0x%08X) --> 0x%08llX", r, (long long)ret);
  return ret;
}

#define _MA_EACCES 13
#define _MA_ENOSYS 38

void _ma_ecall(void) {
  _MA_DEBUGF("Syscall %d (%d, %d, %d, %d, %d, %d)",
      _ma_regs.x[_MA_REG_A7],
      _ma_regs.x[_MA_REG_A0], _ma_regs.x[_MA_REG_A1], _ma_regs.x[_MA_REG_A2], _ma_regs.x[_MA_REG_A3], _ma_regs.x[_MA_REG_A4], _ma_regs.x[_MA_REG_A5]);
  errno = 0;
  /* Syscall table: https://jborza.com/post/2021-05-11-riscv-linux-syscalls/ */
  switch (_ma_regs.x[_MA_REG_A7]){
    case 48: /* asmlinkage long sys_faccessat(int dfd, const char __user *filename, int mode); */
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = -1;
      errno = _MA_EACCES;
      break;
    case 63: /* asmlinkage long sys_read(unsigned int fd, const char __user *buf, size_t count); */
      _ma_regs.x[_MA_REG_A0] = read((int)_ma_regs.x[_MA_REG_A0], _ma_translate_ptr(_ma_regs.x[_MA_REG_A1]), (size_t)_ma_regs.x[_MA_REG_A2]);
      break;
    case 64: /* asmlinkage long sys_write(unsigned int fd, const char __user *buf, size_t count); */
      _ma_regs.x[_MA_REG_A0] = write((int)_ma_regs.x[_MA_REG_A0], _ma_translate_ptr(_ma_regs.x[_MA_REG_A1]), (size_t)_ma_regs.x[_MA_REG_A2]);
      break;
    case 66: /* asmlinkage long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen); */
      {
        _ma_reg_t fd = _ma_regs.x[_MA_REG_A0];
        _ma_reg_t iovcnt = _ma_regs.x[_MA_REG_A0];
        struct _ma_iovec {
          _ma_reg_t iov_base;
          _ma_reg_t iov_len;
        } _ma_iovec;
        struct _ma_iovec *iov_g = malloc(sizeof(struct _ma_iovec)*iovcnt);
        memcpy(iov_g, _ma_translate_ptr(_ma_regs.x[_MA_REG_A1]), sizeof(_ma_iovec)*iovcnt);
        struct iovec *iov_h = malloc(sizeof(struct iovec)*iovcnt);
        int i;
        for (i = 0; i < iovcnt; i++) {
          iov_h[i].iov_base = _ma_translate_ptr(iov_g[i].iov_base);
          iov_h[i].iov_len = iov_g[i].iov_len;
        }
        _ma_regs.x[_MA_REG_A0] = writev(fd, iov_h, iovcnt);
        free(iov_g);
        free(iov_h);
      }
    case 78: /* asmlinkage long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz); */
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = -1;
      errno = _MA_EACCES;
      break;
    case 93: /* asmlinkage long sys_exit(int error_code); */
      exit((int)_ma_regs.x[_MA_REG_A0]);
      break;
    case 94: /* asmlinkage long sys_exit_group(int error_code); */
#if defined(__linux__)
      syscall(SYS_exit_group, _ma_regs.x[_MA_REG_A0]);
#else
      exit(_ma_regs.x[_MA_REG_A0]);
#endif
      break;
    case 131: /* asmlinkage long sys_tgkill(pid_t tgid, pid_t pid, int sig); */
#if defined(__linux__)
      _ma_regs.x[_MA_REG_A0] = tgkill(_ma_regs.x[_MA_REG_A0], _ma_regs.x[_MA_REG_A1], _ma_regs.x[_MA_REG_A2]);
#else
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = kill(_ma_regs.x[_MA_REG_A1], _ma_regs.x[_MA_REG_A2]);
#endif
      break;
    case 135: /* asmlinkage long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize); */
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = 0;
      break;
    case 160: /* asmlinkage long sys_newuname(struct new_utsname __user *name); */
      {
        struct {
          char sysname[65];
          char nodename[65];
          char release[65];
          char version[65];
          char machine[65];
          char domainname[65];
        } u = {
          .sysname = "Linux",
          .nodename = "myaot",
          .release = "6.0.0-0-myaot",
          .version = "#0-MyAOT",
#if _MA_REG_TYPE == uint32_t
          .machine = "riscv32",
#else
          .machine = "riscv64",
#endif
        };
        memcpy(_ma_translate_ptr(_ma_regs.x[_MA_REG_A0]), &u, sizeof(u));
        _ma_regs.x[_MA_REG_A0] = 0;
      }
      break;
    case 172: /* asmlinkage long sys_getpid(void); */
      _ma_regs.x[_MA_REG_A0] = getpid();
      break;
    case 173: /* asmlinkage long sys_getppid(void); */
      _ma_regs.x[_MA_REG_A0] = getppid();
      break;
    case 174: /* asmlinkage long sys_getuid(void); */
      _ma_regs.x[_MA_REG_A0] = getuid();
      break;
    case 175: /* asmlinkage long sys_geteuid(void); */
      _ma_regs.x[_MA_REG_A0] = geteuid();
      break;
    case 176: /* asmlinkage long sys_getgid(void); */
      _ma_regs.x[_MA_REG_A0] = getgid();
      break;
    case 177: /* asmlinkage long sys_getegid(void); */
      _ma_regs.x[_MA_REG_A0] = getegid();
      break;
    case 178: /* asmlinkage long sys_gettid(void); */
#if defined(__linux__)
      _ma_regs.x[_MA_REG_A0] = gettid();
#else
      _ma_regs.x[_MA_REG_A0] = 0; /* STUB */
#endif /* __linux__ */
      break;
    case 214: /* asmlinkage long sys_brk(unsigned long brk); */
      if (_ma_regs.x[_MA_REG_A0] == 0) {
        _ma_regs.x[_MA_REG_A0] = _ma_vma_heap_cur;
      } else if (_ma_vma_heap_entry->addr <= _ma_regs.x[_MA_REG_A0] &&
          _ma_regs.x[_MA_REG_A0] <= _ma_vma_heap_entry->addr + _ma_vma_heap_entry->len - 1) {
        _ma_vma_heap_cur = _ma_regs.x[_MA_REG_A0];
      } else {
        _MA_FATALF("Unsupported brk(0x%08X)", _ma_regs.x[_MA_REG_A0]);
      }
      break;
    case 222: /* void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); */
      /* TODO */
      if (_ma_regs.x[_MA_REG_A4] != -1) {
        _MA_FATALF("Unsupported mmap(A4=0x%08X)", _ma_regs.x[_MA_REG_A4]);
      }
      if (_ma_regs.x[_MA_REG_A5] != 0) {
        _MA_FATALF("Unsupported mmap(A5=0x%08X)", _ma_regs.x[_MA_REG_A5]);
      }
      if (_ma_regs.x[_MA_REG_A0] == 0) {
        _ma_regs.x[_MA_REG_A0] = _ma_vma_heap_cur;
        _ma_vma_heap_cur += _ma_regs.x[_MA_REG_A1];
      } else {
        _MA_FATALF("Unsupported mmap(A0=0x%08X)", _ma_regs.x[_MA_REG_A0]);
      }
			break;
    case 226: /* asmlinkage long sys_mprotect(unsigned long start, size_t len, unsigned long prot); */
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = 0;
      break;
    case 291: /* asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer); */
      /* TODO */
      _ma_regs.x[_MA_REG_A0] = -1;
      errno = _MA_EACCES;
      break;
    case 403: /* asmlinkage long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp); */
      {
        /* TODO: check which_clock */
        struct timespec tp_host;
        int ret = clock_gettime(CLOCK_REALTIME, &tp_host);
        struct {
          uint64_t tv_sec; /* time_t */
          _ma_reg_t tv_nsec; /* long */
        } tp = {
          .tv_sec = (uint64_t)tp_host.tv_sec,
          .tv_nsec = (_ma_reg_t)tp_host.tv_nsec,
        };
        memcpy(_ma_translate_ptr(_ma_regs.x[_MA_REG_A1]), &tp, sizeof(tp));
        _ma_regs.x[_MA_REG_A0] = (_ma_reg_t)ret;
      }
      break;
    case 422: /* asmlinkage long sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3); */
      /* TODO */
      if ((_ma_regs.x[_MA_REG_A1] & 0x7F) == 0) {
        /* FUTEX_WAIT */
        _ma_regs.x[_MA_REG_A0] = 0;
      } else {
        _MA_FATALF("Unknown futex op 0%08X", _ma_regs.x[_MA_REG_A1]);
      }
      break;
    default:
      _MA_FATALF("Unknown syscall number %d", _ma_regs.x[_MA_REG_A7]);
      break;
  }
  if (errno != 0) {
    _ma_regs.x[_MA_REG_A1] = errno;
  }
}
